# This workflow will upload a Python package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/

name: tests

on:
  push:
    tags:
      - "v*"  # Test and deploy on push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # Default pip cache location
          # Create a unique key based on OS, Python version, and requirements files
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', '**/setup.py', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on Linux
      - uses: tlambert03/setup-qt-libs@v1

      # Strategy borrowed from vispy for installing OpenGL libs on Windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      # Note: If you need dependencies from conda, consider using
      # - setup-miniconda: https://github.com/conda-incubator/setup-miniconda
      # - and tox-conda: https://github.com/tox-dev/tox-conda
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-gh-actions

      # For non-Linux platforms, use the original approach
      - name: Test with tox
        uses: GabrielBB/xvfb-action@v1
        with:
          run: python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    # This will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    #if: contains(github.ref, 'tags')

    steps:
      - uses: actions/checkout@v4
        with: # Need to fetch tags for setuptools_scm to work correctly
          fetch-depth: 0

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # Create a unique key based on OS, Python version, and requirements files
          key: ${{ runner.os }}-pip-${{ env.pythonLocation }}-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', '**/setup.py', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.pythonLocation }}-
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build

      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag # Display the tag being built
          python -m build .
          twine check dist/* # Add check before upload
          twine upload dist/*
